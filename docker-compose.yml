
networks:
  backend_network:
    driver: bridge

services:
  fastapi:
    build: .
    container_name: fastapi_app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=${DATABASE_URL_DOCKER}
      - DB_NAME=${DB_NAME_DOCKER}
      - REDIS_HOST=${REDIS_HOST_DOCKER}
      - REDIS_PORT=${REDIS_PORT_DOCKER}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    depends_on:
      - mongo
      - redis_service
      - prometheus
    networks:
      - backend_network
    


  mongo:
    image: mongo:latest
    container_name: mongo_db
    # restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend_network

  redis_service:
    image: redis:alpine
    container_name: redis_server
    command: redis-server --maxclients 20000 --appendonly no
    # restart: always
    ports:
      - "6379:6379"
    networks:
      - backend_network
    sysctls:
    - net.core.somaxconn=65535

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    # restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # Persistent storage for metrics

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus" # Store database in /prometheus
      - "--storage.tsdb.retention.time=30d" # Keep metrics for 30 days
    networks:
      - backend_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    # restart: always
    ports:
      - "3000:3000" 
    environment:
      # - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    # volumes:
    #   - grafana_data:/var/lib/grafana

    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - backend_network

volumes:
  mongo_data:
  grafana_data:
  prometheus_data:
    driver: local

    
